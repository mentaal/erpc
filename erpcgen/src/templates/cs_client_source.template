{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}
using System;
using erpc;

{% def clientShimCode(fn, serverIDName, functionIDName) ------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% set clientIndent = "" >%}
{% if generateErrorChecks %}
    erpc_status err = erpc_status.kErpcStatus_Success;

{% endif -- generateErrorChecks %}
{% if fn.returnValue.type.isNotVoid %}
    {$fn.returnValue.resultVariable}{% if fn.returnValue.isNullReturnType %} = null{%else%} = 0{%endif%};

{% endif -- isNotVoid %}
    // Get a new request.
{% if !fn.isReturnValue %}
    Client.ClientManager.RequestContext request = client.createRequest(true);
{% else %}
    Client.ClientManager.RequestContext request = client.createRequest(false);
{% endif -- isReturnValue %}

    // Encode the request.
{% if codecClass == "Codec" %}
    {$codecClass} codec = request.getCodec();
{% else %}
    {$codecClass} codec = ({$codecClass})(request.getCodec());
{% endif %}

{% if generateAllocErrorChecks %}
{%  set clientIndent = "    " >%}
    if (codec == null)
    {
        err = erpc_status.kErpcStatus_MemoryError;
    }
    else
    {
{% endif -- generateErrorChecks %}
{$clientIndent}    codec.startWriteMessage(MessageType.{% if not fn.isReturnValue %}kOnewayMessage{% else %}kInvocationMessage{% endif %}, (UInt32){$serverIDName}, (UInt32){$functionIDName}, request.getSequence());

{% if fn.isSendValue %}
{%  for param in fn.parameters if (param.serializedDirection == "" || param.serializedDirection == OutDirection || param.referencedName != "") %}
{%   if param.isNullable %}
{$ addIndent(clientIndent & "    ", f_paramIsNullableEncode(param))}

{%   else -- isNullable %}
{%    if param.direction != OutDirection %}
{$addIndent(clientIndent & "    ", param.coderCall.encode(param.coderCall))}

{%    endif -- param != OutDirection %}
{%   endif -- isNullable %}
{%  endfor -- fn parameters %}
{% endif -- isSendValue %}
{$clientIndent}    // Send message to server
{$clientIndent}    // Codec status is checked inside this function.
{$clientIndent}    client.performRequest(request);
{% if fn.isReturnValue %}
{%  if fn.needTempVariableClient %}

{$clientIndent}    Int32 _tmp_local = 0;
{%  endif %}
{%  for param in fn.parametersToClient if (param.serializedDirection == "" || param.serializedDirection == InDirection || param.referencedName != "") %}

{%   if param.isNullable %}
{$clientIndent}    if ({$param.nullableName} != NULL{% if ((source == "client") && (param.direction != ReturnDirection) && (empty(param.lengthName) == false)) %} && {$param.lengthName} != NULL{% endif %})
{$clientIndent}    {
{$addIndent(clientIndent & "        ", param.coderCall.decode(param.coderCall))}
        }
{%   else -- notNullable %}
{$addIndent(clientIndent & "    ", param.coderCall.decode(param.coderCall))}
{%   endif -- isNullable %}
{%  endfor -- fn parametersToClient %}
{%  if fn.returnValue.type.isNotVoid %}

{%   if fn.returnValue.isNullable %}
{$clientIndent}    bool isNull;
{$addIndent(clientIndent & "    ", f_paramIsNullableDecode(fn.returnValue))}
{%   else -- isNullable %}
{$> addIndent(clientIndent & "    ", allocMem(fn.returnValue.firstAlloc))}
{$addIndent(clientIndent & "    ", fn.returnValue.coderCall.decode(fn.returnValue.coderCall))}
{%   endif -- isNullable %}
{%  endif -- isNotVoid %}
{% endif -- isReturnValue %}
{% if generateErrorChecks %}

{$clientIndent}    err = codec.getStatus();
{% endif -- generateErrorChecks %}
{%    if generateAllocErrorChecks %}
    }
{% endif -- generateAllocErrorChecks %}

    // Dispose of the request.
    client.releaseRequest(request);
{% if generateErrorChecks %}

    // Invoke error handler callback function
    client.callErrorHandler(err, (UInt32){$functionIDName});
{% endif -- generateErrorChecks %}
{% if generateErrorChecks && fn.returnValue.type.isNotVoid %}
{%  if empty(fn.returnValue.errorReturnValue) == false && fn.returnValue.isNullReturnType == false %}

    if (err != erpc_status.kErpcStatus_Success)
    {
        return {$fn.returnValue.errorReturnValue};
    }
{%  endif %}
{% endif -- generateErrorChecks %}

    return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
{% enddef --------------------------------------------------------------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% for callbackType in group.callbacks %}
// Common function for serializing and deserializing callback functions of same type.
static {$callbackType.prototype};

{% endfor %}
{% for callbackType in group.callbacks %}
// Common function for serializing and deserializing callback functions of same type.
static {$callbackType.prototype}
{
{$ clientShimCode(callbackType, "serviceID", "functionID") >}
}
{% endfor %}
//=============================================================
namespace erpc {

{% for iface in group.interfaces %}
    public partial class {$iface.name} {
        Client.ClientManager client = new Client.ClientManager();

        public {$iface.name}(Transport t){
            client.setTransport(t);
        }

{%  for fn in iface.functions %}
        // {$iface.name} interface {$fn.name} function client shim.
{$addIndent("        ", fn.prototype)}
        {
{%   if fn.isCallback %}
    {% if fn.returnValue.type.isNotVoid %}return {% endif %}{$fn.callbackFName}(_{$iface.name}_ids.k{$iface.name}_service_id, _{$iface.name}_ids.k{$iface.name}_{$fn.name}_id{% for param in fn.parameters %}, {$param.name}{% endfor %});
{%    if fn.returnValue.type.isNotVoid %}return;
{%    endif %}
{%   else -- fn.isCallback >%}
{$addIndent("        ", clientShimCode(fn, "_"& iface.name & "_ids.k"& iface.name & "_service_id", "_"& iface.name & "_ids.k" & iface.name & "_" & fn.name & "_id"))}

{%   endif -- fn.isCallback >%}
        }
{%  endfor -- fn %}
{$addIndent("        ", symbolSource(group.symbolsMap.symbolsToServer, "serial", "def"))}
{$addIndent("        ", symbolSource(group.symbolsMap.symbolsToClient, "deserial", "def"))}
{$addIndent("        ", symbolSource(group.symbolsMap.symbolsToServer, "serial", "noSharedMem"))}
{$addIndent("        ", symbolSource(group.symbolsMap.symbolsToClient, "deserial", "noSharedMem"))}
    }
{% endfor -- iface %}

}
